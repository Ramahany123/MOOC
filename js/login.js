import { initializeApp } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-app.js";
import { getDatabase, ref, get, set } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-database.js";

// --- Utility for Hashing Passwords (Client-Side SHA-256) ---
// This function must match the one in register.js exactly.
async function hashPassword(password) {
Â  Â  const encoder = new TextEncoder();
Â  Â  const data = encoder.encode(password);
Â  Â  const hashBuffer = await crypto.subtle.digest('SHA-256', data);
Â  Â  const hashArray = Array.from(new Uint8Array(hashBuffer));
Â  Â  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
Â  Â  return hashHex;
}


// --- 1. CONFIGURATION ---
const firebaseConfig = {
Â  Â  apiKey: "AIzaSyCnCovkec0YaXmgpcnNLx1qiCpGG7-iipU",
Â  Â  authDomain: "educational-site-f1fac.firebaseapp.com",
Â  Â  projectId: "educational-site-f1fac",
Â  Â  storageBucket: "educational-site-f1fac.firebasestorage.app",
Â  Â  messagingSenderId: "868437050505",
Â  Â  appId: "1:868437050505:web:8ca5d61feee67a67647258"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app); 

// Function to ensure the base /roles node exists (used for later admin setup)
async function ensureRolesNodeExists() {
Â  Â  try {
Â  Â  Â  Â  const rolesSnapshot = await get(ref(db, 'roles'));
Â  Â  Â  Â  if (!rolesSnapshot.exists()) {
Â  Â  Â  Â  Â  Â  // Write an empty object to create the node if it's missing
Â  Â  Â  Â  Â  Â  await set(ref(db, 'roles'), {});
Â  Â  Â  Â  Â  Â  console.log("Created missing /roles node.");
Â  Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  Â  // This will often fail initially due to missing write rules, but we include it.
Â  Â  Â  Â  console.warn("Could not ensure /roles node exists. Check write permissions:", error);
Â  Â  }
}

// ðŸ”‘ NEW FUNCTION: Fetches the list of UIDs authorized as Admin
async function getAdminUIDs() {
    try {
        const snapshot = await get(ref(db, 'roles/admin'));
        // The data is returned as an object { UID1: true, UID2: true }
        const adminMap = snapshot.val() || {};
        // Return an array of keys (the UIDs/phone numbers) where the value is true
        return Object.keys(adminMap).filter(uid => adminMap[uid] === true);
    } catch (error) {
        console.error("Failed to fetch admin roles:", error);
        return []; 
    }
}

// ðŸ”‘ TEMPORARY SETUP FUNCTION: Creates the Admin account in /users and role in /roles/admin
async function ensureAdminUserSetup(uid, password, name) {
    const adminUserRef = ref(db, 'users/' + uid);
    const adminRoleRef = ref(db, 'roles/admin/' + uid);

    // 1. Create User in /users
    const passwordHash = await hashPassword(password);
    await set(adminUserRef, {
        name: name,
        email: `${uid}@fakeuser.com`,
        phone: uid,
        passwordHash: passwordHash
    });
    console.log(`Admin user ${uid} profile created in /users.`);

    // 2. Create Role in /roles/admin
    await set(adminRoleRef, true);
    console.log(`Admin user ${uid} role assigned in /roles/admin.`);
}


// --- 2. CONSTANTS & DOM ELEMENTS ---
const ADMIN_DASHBOARD = 'admin.html';
const USER_HOME = 'home.html'; 
const INITIAL_ADMIN_PHONE = '01000000000'; // Define the admin key here
const INITIAL_ADMIN_PASSWORD = 'admin123'; // Define the plaintext password here

document.addEventListener('DOMContentLoaded', () => {
Â  Â  // Attempt to create the /roles node if it's missing
Â  Â  ensureRolesNodeExists(); 
Â  Â  
Â  Â  const loginForm = document.getElementById('loginForm'); 
Â  Â  const errorEl = document.getElementById('error-message');
Â  Â  const loginBtn = document.getElementById('login-btn');

Â  Â  if (loginForm) {
Â  Â  Â  Â  loginForm.addEventListener('submit', (e) => handleLogin(e, errorEl, loginBtn));
Â  Â  } else {
Â  Â  Â  Â  console.error("Login form with ID ''loginForm'' not found.");
Â  Â  }
});


// --- 3. LOGIN HANDLER ---
async function handleLogin(e, errorEl, loginBtn) {
Â  Â  e.preventDefault();
Â  Â  
Â  Â  const formData = new FormData(e.target);
Â  Â  const phoneInput = formData.get('phone').trim();
Â  Â  const passwordInput = formData.get('password').trim();

Â  Â  // Reset UI state
Â  Â  errorEl.classList.add('hidden');
Â  Â  loginBtn.disabled = true;
Â  Â  loginBtn.textContent = 'Signing In...';

Â  Â  // Normalize phone (which is the UID/Key in the /users table)
Â  Â  const cleanedPhone = phoneInput.replace(/\D/g, '');
Â  Â  const uid = cleanedPhone;
Â  Â  const email = `${cleanedPhone}@fakeuser.com`; 
    
    // Fetch the list of admin UIDs for the role check
    const adminUIDs = await getAdminUIDs();


Â  Â  try {
Â  Â  Â  Â  // 1. AUTHENTICATE VIA REALTIME DATABASE: Fetch user record using phone number (UID)
Â  Â  Â  Â  const userSnapshot = await get(ref(db, 'users/' + uid));
Â  Â  Â  Â  
Â  Â  Â  Â  if (!userSnapshot.exists()) {
            // ðŸ”‘ TEMPORARY SETUP CHECK: If the user is the admin and they are missing, create them.
            if (uid === INITIAL_ADMIN_PHONE && passwordInput === INITIAL_ADMIN_PASSWORD) {
                console.log("Initial admin account missing. Running one-time setup...");
                // Set the user in /users and their role in /roles/admin
                await ensureAdminUserSetup(uid, passwordInput, "Super Admin");
                // Login will proceed, but to ensure the newly created user data is fetched, 
                // we throw a temporary error to force the user to click login again.
                // This is the simplest way to get the data without recursive calls.
                throw { code: 'admin-setup', message: 'Admin account created. Please click Sign In again.' }; 
            }
Â  Â  Â  Â  Â  Â  throw { code: 'user-not-found', message: 'Invalid phone number or password. Please check your credentials.' };
Â  Â  Â  Â  }

Â  Â  Â  Â  const userData = userSnapshot.val();
Â  Â  Â  Â  
Â  Â  Â  Â  // 2. HASH AND COMPARE PASSWORD
Â  Â  Â  Â  const inputPasswordHash = await hashPassword(passwordInput);
Â  Â  Â  Â  
Â  Â  Â  Â  if (inputPasswordHash !== userData.passwordHash) {
Â  Â  Â  Â  Â  Â  Â throw { code: 'wrong-password', message: 'Invalid password.' };
Â  Â  Â  Â  }

Â  Â  Â  Â  // 3. Session Management (Store logged user details)
Â  Â  Â  Â  const userName = userData.name || ""; 

Â  Â  Â  Â  localStorage.setItem('loggedUser', JSON.stringify({
Â  Â  Â  Â  Â  Â  name: userName, 
Â  Â  Â  Â  Â  Â  phone: cleanedPhone,
Â  Â  Â  Â  Â  Â  email: email,
Â  Â  Â  Â  Â  Â  uid: uid 
Â  Â  Â  Â  }));
Â  Â  Â  Â  
Â  Â  Â  Â  console.log("Login successful via RTDB."); 

Â  Â  Â  Â  // 4. ðŸ”‘ ADMIN ROLE REDIRECTION CHECK
        if (adminUIDs.includes(uid)) {
            console.log('Admin user detected. Redirecting to dashboard.');
            window.location.href = ADMIN_DASHBOARD;
        } else {
            console.log('Standard user. Redirecting to home.');
            window.location.href = USER_HOME;
        }
        
Â  Â  } catch (error) {
Â  Â  Â  Â  // 5. Handle Errors
Â  Â  Â  Â  let errorMessage = "An unexpected error occurred. Please try again.";
        
        // Handle the specific one-time setup message
        if (error.code === 'admin-setup') {
            errorMessage = error.message;
        }
        else if (error.code === 'user-not-found' || error.code === 'wrong-password') {
Â  Â  Â  Â  Â  Â  errorMessage = "Invalid phone number or password. Please check your credentials.";
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.error("RTDB Login Error:", error.message);
Â  Â  Â  Â  }

Â  Â  Â  Â  errorEl.textContent = errorMessage;
Â  Â  Â  Â  errorEl.classList.remove('hidden');

Â  Â  Â  Â  loginBtn.disabled = false;
Â  Â  Â  Â  loginBtn.textContent = 'Sign In';
Â  Â  }
}
